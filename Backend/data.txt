from elasticsearch import Elasticsearch, RequestsHttpConnection
es = Elasticsearch(
    ['localhost:9200'],
    connection_class=RequestsHttpConnection
)

//get all
response = es.search(index='articles', doc_type='article',body={"query": {"match_all": {}}}, size=2000)

//search
response = es.search(index='articles', doc_type='article',body={"""query": {"term": {"id":"966063"}}}, size=2000)

//example
response = es.search(index='articles', doc_type='article',body={"_source":["entities.ticker"],"query": {"term": {"id":"966063"}}}, size=2000)
>>> response['hits']['hits']
[{u'_score': 1.0, u'_type': u'article', u'_id': u'AVjDmlHZgeWVOPQHWFJw', u'_source': {u'entities': [{u'ticker': u'DXB'}]}, u'_index': u'articles'}]

//search ticker
response = es.search(index='articles', doc_type='article',body={"query": {"bool": {"must":[{"match":{"entities.ticker":"DXB"}}]}}}, size=2000)

//search string
response = es.search(index='articles', doc_type='article',body={"query": {"query_string": {"query":"966063"}}}, size=2000)

//find max id
response = es.search(index='articles', doc_type='article',body={"aggs": {"max_id":{"max":{"field":"id"}}}}, size=1)
response['aggregations']['max_id']['value']

//find articles with id greater then 966063"query": {"range": {"id":{"gt":966063}}}}, size=2000)

response = es.search(index='articles', doc_type='article',body={"_source":["entities.ti
response = es.search(index='articles', doc_type='article',body={cker"],"aggs": {"group_by_ticker":{"terms":{"field":"entities"}}},"aggs":{"ticker":{"terms":{"field":"ticker"}}}}, size=2000)

@socketio.on('get_allSectors', namespace='/articles')
def get_allSectors(message):
    re = es.search(index='articles', doc_type='article', body={"query": {"match_all": {}}}, size=10000)
    responseData = re['hits']['hits']
    dicto = {"sectors": []}
    for artcle in responseData:
        if (artcle['_source']['entities'][0]['sector'] not in dicto['sectors']) and (artcle['_source']['entities'][0]['sector']!='n/a') and (artcle['_source']['entities'][0]['sector']!='N/A'):
            dicto['sectors'].append(artcle['_source']['entities'][0]['sector'])

    emit('receiveAllSectors', {'data': dicto['sectors']})